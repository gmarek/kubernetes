/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package k8s.io.api.events.v1beta1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1beta1";

// Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system.
message Event {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Required. Time when this Event was first observed.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime eventTime = 2;

  // Optional. Data about the Event series this event represents or nil if it's a singleton Event.
  optional EventSeries series = 3;

  // Required. Kubernetes component that generated the Event.
  optional EventSource eventSource = 4;

  // Required. What Origin did/failed to do.
  optional EventAction action = 5;

  // Optional. On what Origin acted upon.
  optional k8s.io.api.core.v1.ObjectReference object = 6;

  // Optional secondary Object for more complex actions.
  optional k8s.io.api.core.v1.ObjectReference secondaryObject = 7;

  // Required. Severity of the Event.
  optional string severity = 8;

  // Optional. A human-readable description of the status of this operation.
  // TODO: decide on maximum length.
  optional string message = 9;
}

// Information about action that was taken
message EventAction {
  optional string action = 1;

  optional string reason = 2;
}

message EventSeries {
  // Unique identifier of the Event series.
  optional string uid = 1;

  // Number of Events in this series until last heartbeat.
  optional int32 count = 2;

  // Time when last Event from the series was seen before last heartbeat.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime lastObservedTime = 3;

  // Last time when seried data was updated.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime lastHeartbeat = 4;

  // Information whether this series is finished.
  optional bool finishMarker = 5;
}

// Information about component that emits Event
message EventSource {
  // Component from which the event is generated.
  optional string component = 1;

  // String that identifies the component emitting the Event
  optional string id = 2;
}

